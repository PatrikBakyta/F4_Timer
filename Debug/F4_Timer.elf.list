
F4_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000730  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008b8  080008c0  000108c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080008b8  080008b8  000108b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080008bc  080008bc  000108bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000108c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000108c0  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000108c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003c41  00000000  00000000  000108f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000007fc  00000000  00000000  00014531  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005e8  00000000  00000000  00014d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000580  00000000  00000000  00015318  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001a36  00000000  00000000  00015898  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000019f3  00000000  00000000  000172ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00018cc1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000019b8  00000000  00000000  00018d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008a0 	.word	0x080008a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080008a0 	.word	0x080008a0

080001c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e076      	b.n	80002d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d165      	bne.n	80002cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2103      	movs	r1, #3
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <GPIO_Init+0x76>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d12e      	bne.n	800029c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2103      	movs	r1, #3
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	401a      	ands	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	4619      	mov	r1, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	b29b      	uxth	r3, r3
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685a      	ldr	r2, [r3, #4]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	799b      	ldrb	r3, [r3, #6]
 800028a:	4619      	mov	r1, r3
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	b29b      	uxth	r3, r3
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	b29b      	uxth	r3, r3
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	79db      	ldrb	r3, [r3, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d985      	bls.n	80001e4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	887b      	ldrh	r3, [r7, #2]
 80002f6:	405a      	eors	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	615a      	str	r2, [r3, #20]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d006      	beq.n	8000328 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800031a:	490a      	ldr	r1, [pc, #40]	; (8000344 <RCC_AHB1PeriphClockCmd+0x3c>)
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <RCC_AHB1PeriphClockCmd+0x3c>)
 800031e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4313      	orrs	r3, r2
 8000324:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000326:	e006      	b.n	8000336 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000328:	4906      	ldr	r1, [pc, #24]	; (8000344 <RCC_AHB1PeriphClockCmd+0x3c>)
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <RCC_AHB1PeriphClockCmd+0x3c>)
 800032c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	43db      	mvns	r3, r3
 8000332:	4013      	ands	r3, r2
 8000334:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40023800 	.word	0x40023800

08000348 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	460b      	mov	r3, r1
 8000352:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000354:	78fb      	ldrb	r3, [r7, #3]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d006      	beq.n	8000368 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800035a:	490a      	ldr	r1, [pc, #40]	; (8000384 <RCC_APB1PeriphClockCmd+0x3c>)
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <RCC_APB1PeriphClockCmd+0x3c>)
 800035e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4313      	orrs	r3, r2
 8000364:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000366:	e006      	b.n	8000376 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000368:	4906      	ldr	r1, [pc, #24]	; (8000384 <RCC_APB1PeriphClockCmd+0x3c>)
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <RCC_APB1PeriphClockCmd+0x3c>)
 800036c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	43db      	mvns	r3, r3
 8000372:	4013      	ands	r3, r2
 8000374:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40023800 	.word	0x40023800

08000388 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a29      	ldr	r2, [pc, #164]	; (8000444 <TIM_TimeBaseInit+0xbc>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d013      	beq.n	80003cc <TIM_TimeBaseInit+0x44>
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a28      	ldr	r2, [pc, #160]	; (8000448 <TIM_TimeBaseInit+0xc0>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d00f      	beq.n	80003cc <TIM_TimeBaseInit+0x44>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003b2:	d00b      	beq.n	80003cc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a25      	ldr	r2, [pc, #148]	; (800044c <TIM_TimeBaseInit+0xc4>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d007      	beq.n	80003cc <TIM_TimeBaseInit+0x44>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a24      	ldr	r2, [pc, #144]	; (8000450 <TIM_TimeBaseInit+0xc8>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d003      	beq.n	80003cc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a23      	ldr	r2, [pc, #140]	; (8000454 <TIM_TimeBaseInit+0xcc>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d108      	bne.n	80003de <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80003cc:	89fb      	ldrh	r3, [r7, #14]
 80003ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80003d2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	885a      	ldrh	r2, [r3, #2]
 80003d8:	89fb      	ldrh	r3, [r7, #14]
 80003da:	4313      	orrs	r3, r2
 80003dc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <TIM_TimeBaseInit+0xd0>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d00c      	beq.n	8000400 <TIM_TimeBaseInit+0x78>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a1c      	ldr	r2, [pc, #112]	; (800045c <TIM_TimeBaseInit+0xd4>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d008      	beq.n	8000400 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80003ee:	89fb      	ldrh	r3, [r7, #14]
 80003f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003f4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	891a      	ldrh	r2, [r3, #8]
 80003fa:	89fb      	ldrh	r3, [r7, #14]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	89fa      	ldrh	r2, [r7, #14]
 8000404:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	685a      	ldr	r2, [r3, #4]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	881a      	ldrh	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <TIM_TimeBaseInit+0xbc>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d003      	beq.n	8000426 <TIM_TimeBaseInit+0x9e>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a09      	ldr	r2, [pc, #36]	; (8000448 <TIM_TimeBaseInit+0xc0>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d104      	bne.n	8000430 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	7a9b      	ldrb	r3, [r3, #10]
 800042a:	b29a      	uxth	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2201      	movs	r2, #1
 8000434:	829a      	strh	r2, [r3, #20]
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40010000 	.word	0x40010000
 8000448:	40010400 	.word	0x40010400
 800044c:	40000400 	.word	0x40000400
 8000450:	40000800 	.word	0x40000800
 8000454:	40000c00 	.word	0x40000c00
 8000458:	40001000 	.word	0x40001000
 800045c:	40001400 	.word	0x40001400

08000460 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	b29b      	uxth	r3, r3
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	b29a      	uxth	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000482:	e007      	b.n	8000494 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	b29b      	uxth	r3, r3
 800048a:	f023 0301 	bic.w	r3, r3, #1
 800048e:	b29a      	uxth	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	801a      	strh	r2, [r3, #0]
  }
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	807b      	strh	r3, [r7, #2]
 80004ac:	4613      	mov	r3, r2
 80004ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004b0:	787b      	ldrb	r3, [r7, #1]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d008      	beq.n	80004c8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	899b      	ldrh	r3, [r3, #12]
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	887b      	ldrh	r3, [r7, #2]
 80004be:	4313      	orrs	r3, r2
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80004c6:	e009      	b.n	80004dc <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	899b      	ldrh	r3, [r3, #12]
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	887b      	ldrh	r3, [r7, #2]
 80004d0:	43db      	mvns	r3, r3
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	4013      	ands	r3, r2
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	819a      	strh	r2, [r3, #12]
  }
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80004f4:	2300      	movs	r3, #0
 80004f6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	81bb      	strh	r3, [r7, #12]
 80004fc:	2300      	movs	r3, #0
 80004fe:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	8a1b      	ldrh	r3, [r3, #16]
 8000504:	b29a      	uxth	r2, r3
 8000506:	887b      	ldrh	r3, [r7, #2]
 8000508:	4013      	ands	r3, r2
 800050a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	899b      	ldrh	r3, [r3, #12]
 8000510:	b29a      	uxth	r2, r3
 8000512:	887b      	ldrh	r3, [r7, #2]
 8000514:	4013      	ands	r3, r2
 8000516:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000518:	89bb      	ldrh	r3, [r7, #12]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d005      	beq.n	800052a <TIM_GetITStatus+0x42>
 800051e:	897b      	ldrh	r3, [r7, #10]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d002      	beq.n	800052a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e001      	b.n	800052e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800052a:	2300      	movs	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000548:	887b      	ldrh	r3, [r7, #2]
 800054a:	43db      	mvns	r3, r3
 800054c:	b29a      	uxth	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	821a      	strh	r2, [r3, #16]
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_Z7initLEDv>:
**  Abstract: main program
**
**===========================================================================
*/

void initLED() {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8000566:	2101      	movs	r1, #1
 8000568:	2008      	movs	r0, #8
 800056a:	f7ff fecd 	bl	8000308 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef initStruct;
	initStruct.GPIO_Pin = GPIO_Pin_12;
 800056e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000572:	603b      	str	r3, [r7, #0]
	initStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000574:	2301      	movs	r3, #1
 8000576:	713b      	strb	r3, [r7, #4]
	initStruct.GPIO_OType = GPIO_OType_PP;
 8000578:	2300      	movs	r3, #0
 800057a:	71bb      	strb	r3, [r7, #6]
	initStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800057c:	2301      	movs	r3, #1
 800057e:	71fb      	strb	r3, [r7, #7]
	initStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000580:	2302      	movs	r3, #2
 8000582:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD,&initStruct);
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <_Z7initLEDv+0x38>)
 800058a:	f7ff fe1d 	bl	80001c8 <GPIO_Init>

	return;
 800058e:	bf00      	nop
}
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00

0800059c <_Z9initTIMERv>:

void initTIMER() {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80005a2:	2101      	movs	r1, #1
 80005a4:	2001      	movs	r0, #1
 80005a6:	f7ff fecf 	bl	8000348 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 27000-1;
 80005aa:	f646 1377 	movw	r3, #26999	; 0x6977
 80005ae:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80005b0:	2300      	movs	r3, #0
 80005b2:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = 30000-1;
 80005b4:	f247 532f 	movw	r3, #29999	; 0x752f
 80005b8:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005ca:	f7ff fedd 	bl	8000388 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 80005ce:	2101      	movs	r1, #1
 80005d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005d4:	f7ff ff44 	bl	8000460 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); // povolenie update eventu
 80005d8:	2201      	movs	r2, #1
 80005da:	2101      	movs	r1, #1
 80005dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005e0:	f7ff ff5e 	bl	80004a0 <TIM_ITConfig>

	return;
 80005e4:	bf00      	nop
}
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <main>:

int main(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

	initLED();
 80005f0:	f7ff ffb6 	bl	8000560 <_Z7initLEDv>
	initTIMER();
 80005f4:	f7ff ffd2 	bl	800059c <_Z9initTIMERv>

	while (1) {

		// manualne sledovanie, nenastaveny interrupt
		if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 80005f8:	2101      	movs	r1, #1
 80005fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005fe:	f7ff ff73 	bl	80004e8 <TIM_GetITStatus>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf14      	ite	ne
 8000608:	2301      	movne	r3, #1
 800060a:	2300      	moveq	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f2      	beq.n	80005f8 <main+0xc>

			TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000612:	2101      	movs	r1, #1
 8000614:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000618:	f7ff ff90 	bl	800053c <TIM_ClearITPendingBit>
		    GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 800061c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000620:	4801      	ldr	r0, [pc, #4]	; (8000628 <main+0x3c>)
 8000622:	f7ff fe5f 	bl	80002e4 <GPIO_ToggleBits>
int main(void) {

	initLED();
	initTIMER();

	while (1) {
 8000626:	e7e7      	b.n	80005f8 <main+0xc>
 8000628:	40020c00 	.word	0x40020c00

0800062c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800062c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000664 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000630:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000632:	e003      	b.n	800063c <LoopCopyDataInit>

08000634 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000636:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000638:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800063a:	3104      	adds	r1, #4

0800063c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000640:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000642:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000644:	d3f6      	bcc.n	8000634 <CopyDataInit>
  ldr  r2, =_sbss
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000648:	e002      	b.n	8000650 <LoopFillZerobss>

0800064a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800064a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800064c:	f842 3b04 	str.w	r3, [r2], #4

08000650 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000652:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000654:	d3f9      	bcc.n	800064a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000656:	f000 f84b 	bl	80006f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065a:	f000 f8fb 	bl	8000854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800065e:	f7ff ffc5 	bl	80005ec <main>
  bx  lr    
 8000662:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000664:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000668:	080008c0 	.word	0x080008c0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000670:	20000000 	.word	0x20000000
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000674:	20000000 	.word	0x20000000
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000678:	2000001c 	.word	0x2000001c

0800067c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC_IRQHandler>
	...

08000680 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000694:	e7fe      	b.n	8000694 <HardFault_Handler+0x4>
 8000696:	bf00      	nop

08000698 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800069c:	e7fe      	b.n	800069c <MemManage_Handler+0x4>
 800069e:	bf00      	nop

080006a0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80006a4:	e7fe      	b.n	80006a4 <BusFault_Handler+0x4>
 80006a6:	bf00      	nop

080006a8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80006ac:	e7fe      	b.n	80006ac <UsageFault_Handler+0x4>
 80006ae:	bf00      	nop

080006b0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop

080006f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f4:	4a16      	ldr	r2, [pc, #88]	; (8000750 <SystemInit+0x60>)
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <SystemInit+0x60>)
 80006f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000704:	4a13      	ldr	r2, [pc, #76]	; (8000754 <SystemInit+0x64>)
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <SystemInit+0x64>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <SystemInit+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <SystemInit+0x64>)
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <SystemInit+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000724:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <SystemInit+0x64>)
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <SystemInit+0x68>)
 800072a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <SystemInit+0x64>)
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <SystemInit+0x64>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000736:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <SystemInit+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800073e:	f000 f80d 	bl	800075c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000742:	4b03      	ldr	r3, [pc, #12]	; (8000750 <SystemInit+0x60>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#endif
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00
 8000754:	40023800 	.word	0x40023800
 8000758:	24003010 	.word	0x24003010

0800075c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800076a:	4a36      	ldr	r2, [pc, #216]	; (8000844 <SetSysClock+0xe8>)
 800076c:	4b35      	ldr	r3, [pc, #212]	; (8000844 <SetSysClock+0xe8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000774:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000776:	4b33      	ldr	r3, [pc, #204]	; (8000844 <SetSysClock+0xe8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3301      	adds	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d103      	bne.n	8000794 <SetSysClock+0x38>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000792:	d1f0      	bne.n	8000776 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000794:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <SetSysClock+0xe8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80007a0:	2301      	movs	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	e001      	b.n	80007aa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d142      	bne.n	8000836 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80007b0:	4a24      	ldr	r2, [pc, #144]	; (8000844 <SetSysClock+0xe8>)
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <SetSysClock+0xe8>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80007bc:	4a22      	ldr	r2, [pc, #136]	; (8000848 <SetSysClock+0xec>)
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SetSysClock+0xec>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80007c8:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <SetSysClock+0xe8>)
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <SetSysClock+0xe8>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80007d0:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <SetSysClock+0xe8>)
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <SetSysClock+0xe8>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007da:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <SetSysClock+0xe8>)
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <SetSysClock+0xe8>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80007e6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <SetSysClock+0xe8>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <SetSysClock+0xf0>)
 80007ec:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <SetSysClock+0xe8>)
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <SetSysClock+0xe8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007f8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80007fa:	bf00      	nop
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <SetSysClock+0xe8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0f9      	beq.n	80007fc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <SetSysClock+0xf4>)
 800080a:	f240 7205 	movw	r2, #1797	; 0x705
 800080e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <SetSysClock+0xe8>)
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <SetSysClock+0xe8>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f023 0303 	bic.w	r3, r3, #3
 800081a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800081c:	4a09      	ldr	r2, [pc, #36]	; (8000844 <SetSysClock+0xe8>)
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <SetSysClock+0xe8>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000828:	bf00      	nop
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <SetSysClock+0xe8>)
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	f003 030c 	and.w	r3, r3, #12
 8000832:	2b08      	cmp	r3, #8
 8000834:	d1f9      	bne.n	800082a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000
 800084c:	07405419 	.word	0x07405419
 8000850:	40023c00 	.word	0x40023c00

08000854 <__libc_init_array>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <__libc_init_array+0x3c>)
 8000858:	4c0e      	ldr	r4, [pc, #56]	; (8000894 <__libc_init_array+0x40>)
 800085a:	1ae4      	subs	r4, r4, r3
 800085c:	10a4      	asrs	r4, r4, #2
 800085e:	2500      	movs	r5, #0
 8000860:	461e      	mov	r6, r3
 8000862:	42a5      	cmp	r5, r4
 8000864:	d004      	beq.n	8000870 <__libc_init_array+0x1c>
 8000866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800086a:	4798      	blx	r3
 800086c:	3501      	adds	r5, #1
 800086e:	e7f8      	b.n	8000862 <__libc_init_array+0xe>
 8000870:	f000 f816 	bl	80008a0 <_init>
 8000874:	4c08      	ldr	r4, [pc, #32]	; (8000898 <__libc_init_array+0x44>)
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <__libc_init_array+0x48>)
 8000878:	1ae4      	subs	r4, r4, r3
 800087a:	10a4      	asrs	r4, r4, #2
 800087c:	2500      	movs	r5, #0
 800087e:	461e      	mov	r6, r3
 8000880:	42a5      	cmp	r5, r4
 8000882:	d004      	beq.n	800088e <__libc_init_array+0x3a>
 8000884:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000888:	4798      	blx	r3
 800088a:	3501      	adds	r5, #1
 800088c:	e7f8      	b.n	8000880 <__libc_init_array+0x2c>
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	080008b8 	.word	0x080008b8
 8000894:	080008b8 	.word	0x080008b8
 8000898:	080008bc 	.word	0x080008bc
 800089c:	080008b8 	.word	0x080008b8

080008a0 <_init>:
 80008a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a2:	bf00      	nop
 80008a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008a6:	bc08      	pop	{r3}
 80008a8:	469e      	mov	lr, r3
 80008aa:	4770      	bx	lr

080008ac <_fini>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	bf00      	nop
 80008b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b2:	bc08      	pop	{r3}
 80008b4:	469e      	mov	lr, r3
 80008b6:	4770      	bx	lr
